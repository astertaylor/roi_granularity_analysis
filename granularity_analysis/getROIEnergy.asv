function [energy_store,error_bars,wave_numbers] = getROIEnergy(gray,roi,nbins,njack,out_path,ind,labels,energy_store,error_bars,angle) 

    m_img = cropImage(gray,roi,angle);  %crop image
    
    [y,x] = ind2sub(size(m_img),find(rois(:,:,1)==1)); %grab boundary points
    
    roi_ul_x = min(x);
    roi_ul_y = min(y);
    roi_lr_x = max(x);
    roi_lr_y = max(y);
    width = round(roi_lr_x-roi_ul_x);
    height = round(roi_lr_y-roi_ul_y); %find boundaries of ROI
    if height>width 
        m_img = imrotate(m_img,90);
        stor
    end
    k_x = getWavenumbers(width); %grab wavenumbers
    k_y = getWavenumbers(height);

    isize = size(m_img);
    isize = isize(1); %get ROI dimensions

    saveImage(m_img,out_path,"Images",labels(ind),'image'); %save image

    [fft_orig,spectrum] = performFFT(m_img); %get FFT
    fft_orig(1,1) = 0;

    saveImage(abs(log(spectrum)),out_path,"Output",labels(ind),'figure');
    isize = size(spectrum);
    isize = isize(1); %reset size, just in case

    [band_energy,wave_numbers,P_error,~] = binData(fft_orig,k,nbins); %bin the data, get Poisson error

    [~,~,p] = jackknifeError(m_img,nbins,njack);
    J_error = polyval(p,log10(wave_numbers));
    J_error = 10.^J_error %get jackknife error

    energy_store = cat(2,energy_store,band_energy);
    P_error
    error_bars = cat(2,error_bars,max(P_error,J_error)); %get maximum of P and J error
    
end